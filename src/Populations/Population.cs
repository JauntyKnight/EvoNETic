using System;
using System.Collections;
using System.Collections.Generic;

namespace EvoNETic
{
    public class Population<TGene, TCollection, TFitness> : IPopulation<TGene, TCollection, TFitness>
        where TGene : IEquatable<TGene>
        where TCollection : ICollection<TGene>, new()
        where TFitness : IComparable<TFitness>
    {
        public int Size { get; }

        public ICollection<IChromosome<TGene, TCollection, TFitness>> Chromosomes { get; }

        /// <summary>
        /// Builds a new population from a collection of chromosomes.
        /// </summary>
        /// <param name="chromosomes">A collection of chromosomes</param>
        public Population(ICollection<IChromosome<TGene, TCollection, TFitness>> chromosomes)
        {
            Chromosomes = new List<IChromosome<TGene, TCollection, TFitness>>(chromosomes);
            Size = Chromosomes.Count;
        }

        /// <summary>
        /// Builds a new population from a 2D collection of genes.
        /// </summary>
        /// <param name="genotype">A 2D collection of genes</param>
        public Population(ICollection<ICollection<TGene>> genotype)
        {
            Chromosomes = new List<IChromosome<TGene, TCollection, TFitness>>();

            foreach (var chromosome in genotype)
            {
                Chromosomes.Add(new Chromosome<TGene, TCollection, TFitness>(chromosome));
            }

            Size = Chromosomes.Count;
        }

        /// <summary>
        /// Builds a new population iteratively, where each gene is generated by a factory function.
        /// </summary>
        /// <param name="populationSize">The size of the population</param>
        /// <param name="geneFactory">A factory function that generates a gene</param>
        /// <param name="chromosomeSize">The size of each chromosome</param>
        public Population(int populationSize, Func<TGene> geneFactory, int chromosomeSize)
        {
            Chromosomes = new List<IChromosome<TGene, TCollection, TFitness>>();

            for (int i = 0; i < populationSize; i++)
            {
                Chromosomes.Add(new Chromosome<TGene, TCollection, TFitness>(geneFactory, chromosomeSize));
            }

            Size = Chromosomes.Count;
        }

        public IEnumerator<IChromosome<TGene, TCollection, TFitness>> GetEnumerator()
        {
            return Chromosomes.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
